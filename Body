class Body {
  PVector location;
  PVector speed;  
  PVector accelleration;  
  float   mass;  
  color c;
  float size;
  float limit;
 
  Body(PVector tempLocation, PVector tempSpeed, float tempMass, 
  color tempColor,  float tempSize, float tempLimit) {   
    location = tempLocation;
    speed = tempSpeed;
    mass = tempMass;
    c = tempColor;
    size = tempSize;
    limit = tempLimit;   
  }
  
  void drawMovingObject() {     
    fill(c);
    ellipse(location.x, location.y, size, size);  
  }
  
  public void updateMyLocation() {
    updateMySpeed();
    location.add(speed);
   }
   
  private void updateMySpeed() {
    updateMyAccelleration();
    speed.add(accelleration);
   }

  private void updateMyAccelleration() {                                                                          
    accelleration = new PVector(0,0);
    for (int i = 0; i < bodies.length; i++)
      if(bodies[i]!= this)
      accelleration.add(bodies[i].contributionToAccelerationOf(this));
  }
  
  PVector contributionToAccelerationOf(Body otherBody) {                                                       
    PVector inbound = PVector.sub(location, otherBody.location);
    float r = constrain(inbound.mag(), limit, limit);  
    inbound.normalize();                                                                                     
    float force = (G * mass * otherBody.mass)/(r * r);                                                     
    inbound.mult(force/otherBody.mass);
    return inbound;
  }
}
